<%= render 'admin/shared/flash_messages' %>
<h4 class="page-header">图片管理</h4>

<p><%= link_to 'New Upload', new_admin_upload_path %></p>

<!-- 初始化按钮 start -->
<div class="col-md-12">
  <div id="container">
    <a class="btn btn-primary" id="pickfiles" href="#" data-uptoken="<%= @uptoken %>">
        <i class="fa fa-plus"></i>
        <span>上传图片</span>
    </a>
  </div>
</div>
<!-- 初始化按钮 end -->


<table class="table table-hover">
  <thead>
    <tr>
      <th>Filename</th>
      <th>Preview</th>
      <th>URL</th>
      <th>功能</th>
    </tr>
  </thead>

  <tbody>
    <% @uploads.each do |upload| %>
      <tr>
        <td><%= upload.filename %></td>
        <td><%= image_tag(qiniu_image_url(upload, :square)) %></td>
        <td><input id="pic_<%= upload.id %>"  style="width:350px" value="<%= "http://op61r3aq7.bkt.clouddn.com/#{upload.picurl}" %>" /></td>
        <td><%= link_to fa_icon('trash-o'), admin_upload_path(upload), method: :delete, data: { confirm: '确认删除?' } %></td>
      </tr>
    <% end %>
  </tbody>
</table>


<!-- 初始化配置 start -->
<script type="text/javascript">
  var uploader = Qiniu.uploader({
    runtimes: 'html5,html4',          //上传模式,依次退化
    browse_button: 'pickfiles',       //上传选择的点选按钮，**必需**
    uptoken : '<%= @uptoken %>',
        //若未指定uptoken_url,则必须指定 uptoken ,uptoken由其他程序生成
    unique_names: true,
        // 默认 false，key为文件名。若开启该选项，SDK会为每个文件自动生成key（文件名）
    save_key: true,
        // 默认 false。若在服务端生成uptoken的上传策略中指定了 `sava_key`，则开启，SDK在前端将不对key进行任何处理
		domain: '<%= Rails.application.config.qiniu_domain %>',
        //bucket 域名，下载资源时用到，**必需**
    container: 'container',           //上传区域DOM ID，默认是browser_button的父元素，
    max_file_size: '5mb',           //最大文件体积限制
    // flash_swf_url: 'js/plupload/Moxie.swf',  //引入flash,相对路径
    max_retries: 3,                   //上传失败最大重试次数
    dragdrop: true,                   //开启可拖曳上传
    drop_element: 'container',        //拖曳上传区域元素的ID，拖曳文件或文件夹后可触发上传
    chunk_size: '1mb',                //分块上传时，每片的体积
    auto_start: true,                 //选择文件后自动上传，若关闭需要自己绑定事件触发上传
    init: {
      'FileUploaded': function(up, file, info) {
        // 每个文件上传成功后,处理相关的事情
        // 其中 info 是文件上传成功后，服务端返回的json，形式如
        // {
        //    "hash": "Fh8xVqod2MQ1mocfI4S4KpRL6D98",
        //    "key": "gogopher.jpg"
        //  }
        // 参考http://developer.qiniu.com/docs/v6/api/overview/up/response/simple-response.html
        var domain = up.getOption("domain");
        var res = $.parseJSON(info);
        info['sourceLink'] = '//' + domain + '/' + res.key; //获取上传成功后的文件的Url
        console.log(info);
        // console.log(sourceLink);
        // Ajax 保存到数据看

        $.ajax({
          url: '/admin/uploads/qiniu',
          type: 'POST',
          cache: false,
          data: info,
          processData: false,
          contentType: false
        }).done(function(res) {
        }).fail(function(res) {});

      },

      'Error': function(up, err, errTip) {
        //上传出错时,处理相关的事情
      },
      'Key': function(up, file) {
        // 若想在前端对每个文件的key进行个性化处理，可以配置该函数
        // 该配置必须要在 unique_names: false , save_key: false 时才生效
        var key = "";
        // do something with key here
        return key
      }
    }
  });
</script>
<!-- 初始化配置 end -->